@inherits Game
@inject IJSRuntime JsRuntime

@code {
    private SpriteBatch _spriteBatch;
    private IKeyboardDriver _keyboard;
    private GraphicsDeviceManager _graphics;

    private int _levelIndex = -1;
    private Level _level;
    private Paddle paddle;
    private BreakerBall _ball;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _keyboard = new JsKeyboardDriver(JsRuntime);
            _graphics = new GraphicsDeviceManager(this)
            {
                IsFullScreen = false,
                SupportedOrientations = DisplayOrientation.LandscapeLeft | DisplayOrientation.LandscapeRight
            };

            paddle = new Paddle();

            _ball = new BreakerBall();

            await LoadNextLevel();

            await InitializeAsync();
        }
    }

    private async Task LoadNextLevel()
    {
        _levelIndex++;

        _level?.Dispose();

        var levelPath = $"Content/BrickLevels/{_levelIndex}.txt";

        await using var fileStream = await TitleContainer.OpenStream(levelPath);

        _level = new Level(fileStream, paddle, _ball);
        // level = new Level(Content, fileStream, levelIndex);
    }

    protected override async Task LoadContent()
    {
        await Content.SetRootDirectory("Content");

        // Create a new SpriteBatch, which can be used to draw textures.
        _spriteBatch = new SpriteBatch(GraphicsDevice, JsRuntime);

        // TODO: use this.Content to load your game content here
        var playerBarPosition = new Vector2(
            (float)(GraphicsDevice.Viewport.TitleSafeArea.X + (GraphicsDevice.Viewport.TitleSafeArea.Width / 2.0)),
            (float)(GraphicsDevice.Viewport.TitleSafeArea.Height - 16.0));

        var ballPosition = playerBarPosition + new Vector2(0, -16);

        paddle.Initialize(await Content.Load<Texture2D>("Sprites/Paddle"), playerBarPosition, _graphics);

        var ballTexture = await Content.Load<Texture2D>("Sprites/Ball");

        var hudFont = await Content.Load<SpriteFont>("Fonts/Hud");

        _ball.Initialize(ballTexture, ballPosition, _graphics);

        await _level.LoadContent(Content, _graphics);
    }

    protected override async Task Update(GameTime gameTime)
    {
        // if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
        // Exit();

        // TODO: Add your update logic here
        var keyState = await _keyboard.GetState();

        _level.Update(gameTime, keyState);

        if (_level.LevelCleared)
        {
            await LoadNextLevel();
            await _level.LoadContent(Content, _graphics);
        }

        await base.Update(gameTime);
    }

    protected override async Task Draw(GameTime gameTime)
    {
        await _graphics.GraphicsDevice.Clear(Color.CornflowerBlue);

        await _spriteBatch.Begin();

        await _level.Draw(_spriteBatch);

        await _spriteBatch.End();

        await base.Draw(gameTime);
    }
}
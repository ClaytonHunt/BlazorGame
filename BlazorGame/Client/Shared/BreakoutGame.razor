@inherits Game
@inject IJSRuntime JsRuntime

@code {
    private GraphicsDeviceManager _graphics;
    private IKeyboardDriver _keyboard;
    private SpriteBatch _spriteBatch;
    private BreakoutPlayer player;

    [CascadingParameter]
    public ContentManager _content { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            GraphicsDevice.Initialize();
            _graphics = new GraphicsDeviceManager(this);
            _keyboard = new JsKeyboardDriver(JsRuntime);            
            await _content.SetRootDirectory("");

            await InitializeAsync();
        }
    }

    protected override async Task InitializeAsync()
    {
        // TODO: Add your initialization logic here
        player = new BreakoutPlayer();

        await base.InitializeAsync();
    }

    protected override async Task LoadContent()
    {
        // Create a new SpriteBatch, which can be used to draw textures.
        _spriteBatch = new SpriteBatch(GraphicsDevice);

        // TODO: use this.Content to load your game content here
        Vector2 playerPostion = new Vector2(GraphicsDevice.Viewport.TitleSafeArea.X, (float)(GraphicsDevice.Viewport.TitleSafeArea.Y + (GraphicsDevice.Viewport.TitleSafeArea.Height / 2.0)));

        player.Initialize(await _content.Load<Texture2D>("Graphics/player"), playerPostion, _graphics);
    }

    protected override async Task Update(GameTime gameTime)
    {
        // if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
        // Exit();

        // TODO: Add your update logic here
        var keyState = await _keyboard.GetState();

        player.Update(gameTime, keyState);

        await base.Update(gameTime);
    }

    protected override void Draw(GameTime gameTime)
    {
        _graphics.GraphicsDevice.Clear(Color.CornflowerBlue);

        // TODO: Add your drawing code here
        _spriteBatch.Begin();
        player.Draw(_spriteBatch);
        _spriteBatch.End();

        base.Draw(gameTime);
    }
}
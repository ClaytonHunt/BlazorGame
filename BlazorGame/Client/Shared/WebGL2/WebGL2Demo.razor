@inherits Game
@inject IJSRuntime JsRuntime

@code {
    private SpriteBatch _spriteBatch;
    private GraphicsDeviceManager _graphics;

    private IKeyboardDriver _keyboard;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _keyboard = new JsKeyboardDriver(JsRuntime);

            _graphics = new GraphicsDeviceManager(this)
            {
                IsFullScreen = false
            };

            await InitializeAsync();
        }
    }

    protected override async Task InitializeAsync()
    {
        await base.InitializeAsync();
    }

    protected override async Task LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice, JsRuntime);

        await Task.CompletedTask;
    }

    protected override void UnloadContent()
    {
    }

    protected override async Task Update(GameTime gameTime)
    {
        await Task.CompletedTask;
    }

    protected override void Draw(GameTime gameTime)
    {
        _spriteBatch.Begin();

        GraphicsDevice.Clear(Color.CornflowerBlue);

        var rand = new Random();

        for (var i = 0; i < 1000; ++i)
        {
            var rect = new Rectangle(
                rand.Next(800),
                rand.Next(600),
                rand.Next(800),
                rand.Next(600));

            var color = new Color(new Vector3(rand.Next(255), rand.Next(255), rand.Next(255)));

            _spriteBatch.Draw(null, rect, color);
        }

        _spriteBatch.End();

        base.Draw(gameTime);
    }
}

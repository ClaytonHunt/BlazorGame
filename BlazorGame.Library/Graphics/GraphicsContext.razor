@inject IJSRuntime JsRuntime

<canvas id="@Id" height="@Height" width="@Width"></canvas>

@code { 
    private IJSUnmarshalledObjectReference _module;

    [Parameter]
    public int Height { get; set; } = 240;

    [Parameter]
    public int Width { get; set; } = 320;

    [Parameter]
    public bool IsFullScreen { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public readonly string Id = Guid.NewGuid().ToString();

    public IJSUnmarshalledObjectReference Initialize<T>(T game) where T: class
    {
        _module = ((IJSUnmarshalledRuntime) JsRuntime).InvokeUnmarshalled<IJSUnmarshalledObjectReference>("BlazorGame.create");

        _module.Invoke<object>("registerGame", DotNetObjectReference.Create(game));

        var status = _module.Invoke<ExecuteStatus>("initialize", Id);

        if (!status.IsSuccess)
        {
            throw new Exception(status.ErrorMessage);
        }

        return _module;
    }

    public void Clear(Color color)
    {
        _module.InvokeUnmarshalled<Color, ExecuteStatus>("clear", color);
    }

    public class ExecuteStatus
    {
        public bool IsSuccess { get; set; }
        public string ErrorMessage { get; set; }
    }
}
